---
alwaysApply: true
---

# BYSS 学校管理系统 - 整体开发规范

## 错误记录：.cursor/rules/errorlogging.mdc，在每次编辑代码前，先查看错误记录，避免重复犯错

## 前后端字段约定
1. 前端后端关键字段需要保持一致（重要，必要）

## 项目概述
- **项目名称**: BYSS School Management System
- **项目定位**: 中小学一体化学校管理系统
- **开发模式**: 前后端分离架构
- **团队要求**: 全栈工程师需掌握前后端技术栈

## 系统架构

### 技术选型原则
1. **稳定性优先**: 选择成熟、社区活跃的技术栈
2. **开发效率**: 使用现代化工具链，提升开发体验
3. **可维护性**: 代码结构清晰，遵循最佳实践
4. **性能考虑**: 合理的性能优化，避免过度设计

### 核心技术栈
- **前端**: React 18 + TypeScript + Vite + Tailwind CSS
- **后端**: Django 4.2+ + Django REST Framework
- **数据库**: MySQL 8.0+
- **部署**: Docker + Nginx + Gunicorn

## 项目结构

```
BYSS-SchoolSystem/
├── frontend/                 # 前端项目
│   ├── src/
│   │   ├── components/       # 通用组件
│   │   │   ├── ui/          # 基础 UI 组件（包含虚拟化表格）
│   │   │   ├── layout/      # 布局组件
│   │   │   └── shared/      # 业务组件（学生表格等）
│   │   ├── pages/           # 页面组件
│   │   │   └── students/    # 学生管理页面
│   │   ├── features/        # 业务功能模块
│   │   ├── lib/            # 工具库
│   │   ├── hooks/          # 全局 Hooks
│   │   ├── stores/         # 全局状态管理
│   │   └── types/          # TypeScript 类型
├── backend/                  # 后端项目
├── docker/                   # Docker 配置
├── docs/                     # 项目文档
├── scripts/                  # 部署脚本
├── .github/                  # GitHub Actions
├── .cursor/rules/            # Cursor AI 开发规则
│   ├── frontendrules.mdc    # 前端开发规范
│   ├── backendrules.mdc     # 后端开发规范
│   └── overallrules.mdc     # 整体开发规范
├── docker-compose.yml        # 开发环境编排
├── docker-compose.prod.yml   # 生产环境编排
└── README.md
```

## 开发规范

### Git 工作流
1. **分支策略**:
   - `main`: 生产环境代码
   - `develop`: 开发环境代码
   - `feature/*`: 功能开发
   - `fix/*`: Bug 修复
   - `release/*`: 发布准备

2. **提交规范** (Conventional Commits):
   ```
   <type>(<scope>): <subject>
   
   <body>
   
   <footer>
   ```
   - type: feat, fix, docs, style, refactor, test, chore
   - scope: frontend, backend, docker, docs

### 代码规范
1. **前端**: ESLint + Prettier + TypeScript strict mode
2. **后端**: Black + isort + flake8 + mypy
3. **命名规范**:
   - 文件名: kebab-case
   - 组件名: PascalCase
   - 函数/变量: camelCase (前端) / snake_case (后端)

### API 设计规范

#### RESTful 原则
- **URL 规范**: `/api/v1/<resource>/<id>/<sub-resource>`
- **HTTP 方法**: 
  - GET: 查询
  - POST: 创建
  - PUT/PATCH: 更新
  - DELETE: 删除

#### 响应格式
**成功响应**:
```json
{
  "success": true,
  "data": {...},
  "message": "操作成功",
  "timestamp": "2024-01-01T00:00:00Z"
}
```

**错误响应**:
```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "数据验证失败",
    "details": {
      "field_name": ["错误信息"]
    }
  },
  "timestamp": "2024-01-01T00:00:00Z"
}
```

**分页响应**:
```json
{
  "success": true,
  "data": {
    "results": [...],
    "pagination": {
      "page": 1,
      "page_size": 20,
      "total_pages": 10,
      "total_count": 200
    }
  }
}
```

### 认证与授权
1. **认证方式**: JWT (JSON Web Token)
2. **Token 管理**:
   - Access Token: 15分钟过期
   - Refresh Token: 7天过期
3. **权限模型**: RBAC (基于角色的访问控制)
   - 角色: 超级管理员、学校管理员、教师、学生、家长

### 数据库设计原则
1. **命名规范**:
   - 表名: 复数形式，snake_case
   - 字段名: snake_case
   - 索引名: idx_<table>_<columns>
2. **必备字段**:
   - id: UUID 主键
   - created_at: 创建时间
   - updated_at: 更新时间
   - created_by: 创建者
   - updated_by: 更新者
3. **软删除**: 使用 deleted_at 字段

### 安全规范
1. **数据验证**: 前后端双重验证
2. **SQL 注入**: 使用 ORM，避免原生 SQL
3. **XSS 防护**: 内容转义，CSP 策略
4. **CSRF 防护**: Django CSRF + SameSite Cookie
5. **敏感数据**: 加密存储，HTTPS 传输

### 性能优化
1. **前端**:
   - 代码分割与懒加载
   - **虚拟化表格技术**（处理大量数据）
   - 图片优化与 CDN
   - Service Worker 缓存
   - React 组件优化（memo, useMemo, useCallback）
2. **后端**:
   - 数据库查询优化
   - Redis 缓存
   - 异步任务队列 (Celery)
   - API 响应时间优化

### 测试要求
1. **单元测试覆盖率**: > 80%
2. **集成测试**: 核心业务流程
3. **E2E 测试**: 关键用户路径
4. **性能测试**: API 响应时间 < 200ms

### 部署流程
1. **环境隔离**: 开发、测试、预发布、生产
2. **CI/CD**: GitHub Actions + Docker
3. **监控告警**: Sentry + Prometheus + Grafana
4. **日志管理**: ELK Stack

### 文档要求
1. **API 文档**: OpenAPI 3.0 规范
2. **代码注释**: 复杂逻辑必须注释
3. **README**: 项目说明、环境搭建、部署指南
4. **CHANGELOG**: 版本更新记录
5. **cursor 规则**: 根据项目的进度更新cursor 规则：.cursor/rules/backendrules.mdc, .cursor/rules/frontendrules.mdc, .cursor/rules/overallrules.mdc

### 项目管理
1. **迭代周期**: 2周一个 Sprint
2. **任务管理**: GitHub Projects
3. **代码审查**: PR 必须经过 Review
4. **技术债务**: 定期重构，保持代码质量

## 业务模块规划

### 核心模块
1. **用户管理**: 多角色用户体系
2. **组织架构**: 学校、年级、班级管理
3. **教务管理**: 课程、排课、选课
4. **学生管理**: 学籍、成绩、考勤（使用虚拟化表格处理大量数据）
5. **教师管理**: 教师信息、授课安排
6. **家校互通**: 通知、作业、成绩查询
7. **系统管理**: 权限、配置、日志

### 扩展模块
1. **智能分析**: 成绩分析、学情报告
2. **资源管理**: 教室、设备预约
3. **财务管理**: 学费、工资管理
4. **移动端**: 小程序/APP

## 前端组件架构

### 表格组件体系
1. **基础组件**:
   - `Table` - 传统HTML表格组件
   - `VirtualTable` - 虚拟化表格基础组件（支持居中对齐和自适应宽度）

2. **业务组件**:
   - `SimpleVirtualStudentTable` - 学生虚拟化表格（唯一推荐）
   - `StudentDetailModal` - 学生详情弹窗

3. **组件选择原则**:
   - 统一使用虚拟化表格，支持任意数据量
   - 需要详情展示：结合弹窗组件

4. **设计规范**:
   - **居中对齐**：所有表格内容默认居中显示，提供更好的视觉体验
   - **自适应宽度**：智能调整列宽，充分利用容器空间
   - **响应式设计**：在不同屏幕尺寸下保持良好的可读性

### 已弃用组件
- `VirtualStudentTable.tsx` - 存在类型错误，已删除
- `VirtualStudentManagement.tsx` - 性能测试页面，已删除
- `StudentTable.tsx` - 传统表格组件，已完全替换为虚拟化表格

## 技术债务管理
1. **定期评审**: 每月进行技术债务评估
2. **优先级排序**: 安全 > 性能 > 可维护性 > 新功能
3. **重构原则**: 小步快跑，持续改进
4. **组件清理**: 及时移除过时和有问题的组件

## 团队协作
1. **代码规范**: 统一的 Linter 配置
2. **知识共享**: 定期技术分享
3. **文档维护**: 及时更新技术文档
4. **问题追踪**: 使用 Issue 管理问题

## 最新更新

### v2.2.0 (2025-01-03) - 表格设计规范优化
- 统一表格内容居中对齐，提升视觉体验
- 完善虚拟化表格的设计规范和样式指南
- 优化表格组件的可读性和视觉呈现
- 更新前端组件架构文档

### v2.1.0 (2025-01-03) - 虚拟化表格优化
- 移除有问题的 `VirtualStudentTable` 组件
- 删除性能测试页面 `VirtualStudentManagement`
- 统一使用 `SimpleVirtualStudentTable` 作为主要学生表格组件
- 更新学生管理页面，集成虚拟化表格和详情弹窗
- 完善前端组件架构和使用规范
- 更新相关技术文档

---
最后更新: 2025-01-03
维护者: BYSS 技术团队