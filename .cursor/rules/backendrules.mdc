---
alwaysApply: false
---
# BYSS 学校管理系统 - 后端开发规范（精简版）

最后更新: 2025-01-08  
维护者: BYSS 后端团队

## 目录
- 1. 技术栈与项目结构
- 2. 全局约定（响应、分页、认证、权限、日志）
- 3. 学生模块（students）规范
- 4. 班级模块（schools.Class）规范
- 5. 前后端参数映射与接口对齐
- 6. API 文档与调试
- 7. 部署与运行

---

## 1. 技术栈与项目结构

### 1.1 技术栈
```txt
Django 4.2, djangorestframework, drf-spectacular, django-filter, simplejwt
PostgreSQL, Redis, Celery, Gunicorn, Nginx
工具：black, isort, flake8, mypy, pytest, django-debug-toolbar, sentry
```

### 1.2 目录结构（要点）
```
backend/
├── config/ (settings 分环境、urls、wsgi、asgi)
├── apps/
│   ├── authentication/  (登录/刷新 token)
│   ├── users/
│   ├── schools/         (School, Grade, Class)
│   ├── students/
│   ├── common/          (BaseModel、分页、权限、异常)
├── core/                (中间件、celery)
└── tests/
```

---

## 2. 全局约定

### 2.1 统一响应格式
成功：
```json
{ "success": true, "data": {...}, "message": "操作成功", "timestamp": "ISO-8601" }
```
错误：
```json
{ "success": false, "error": { "code": "...", "message": "...", "details": {"field": ["msg"] } }, "timestamp": "ISO-8601" }
```

### 2.2 分页格式
```json
{
  "success": true,
  "data": {
    "results": [...],
    "pagination": {"page":1, "page_size":20, "total_pages":10, "total_count":200}
  }
}
```

### 2.3 认证与权限
- simplejwt，Access 15m，Refresh 7d
- RBAC + 学校级权限（SchoolPermission）

### 2.4 中间件与日志
- `RequestLoggingMiddleware`：注入 `X-Request-ID`、`X-Response-Time`
- `ExceptionHandlerMiddleware`：统一异常返回

---

## 3. 学生模块（students）规范

仅保留关键信息，避免重复：
- 模型：`Student(BaseModel)`，字段含 `student_id, name, gender, birth_date, id_card, phone, email, address, current_class(FK schools.Class)`
- 过滤：`StudentFilter` 支持 `class_id, grade_id, gender` 及创建时间范围
- 视图：`StudentViewSet`（ModelViewSet）
  - list: 支持 `search=name|student_id|phone`、filter、ordering
  - create/update/destroy：权限 `IsOwnerOrAdmin`
  - extra: `bulk_import`, `export`, `statistics`
- 序列化器：`StudentListSerializer | StudentDetailSerializer | StudentCreate/UpdateSerializer`

接口示例（部分）：
```
GET  /api/v1/students/?search=...&class_id=...&page=1&page_size=20
POST /api/v1/students/
GET  /api/v1/students/{id}/
PATCH/DELETE /api/v1/students/{id}/
```

---

## 4. 班级模块（schools.Class）规范

为匹配现有前端（ClassManagement 与 SimpleVirtualClassTable），定义如下：

### 4.1 模型（要点）
```python
class Class(BaseModel):
    code = models.CharField(max_length=32, unique=True, verbose_name='班级编码')
    name = models.CharField(max_length=64, verbose_name='班级名称')  # 如“一年级1班”
    grade = models.ForeignKey('schools.Grade', on_delete=models.PROTECT, related_name='classes', verbose_name='年级')
    head_teacher = models.ForeignKey('teachers.Teacher', null=True, blank=True, on_delete=models.SET_NULL, related_name='managed_classes', verbose_name='班主任')
    capacity = models.PositiveIntegerField(default=50, verbose_name='容量')
    status = models.CharField(max_length=16, choices=[('在读','在读'),('已结班','已结班'),('归档','归档')], default='在读')
    remark = models.TextField(blank=True, default='')

    class Meta:
        db_table = 'classes'
        indexes = [models.Index(fields=['code']), models.Index(fields=['name'])]
```

说明：前端当前以 `className` 过滤学生；后端落地后，前端将补充使用 `class_id`（保持向后兼容）。

### 4.2 过滤与查询参数
```
GET /api/v1/classes/
?search=<名称|编码|班主任名>
&grade_id=<uuid>
&status=<在读|已结班|归档>
&head_teacher_id=<uuid>
&page=1&page_size=20
```

后端 fields 对应当前前端列：
- code → 编码
- name → 名称
- grade.name → 年级（可返回 grade_name）
- head_teacher.name → headTeacherName
- capacity, students.count() → studentCount（建议后端返回 `student_count` 字段）
- status → 状态

### 4.3 序列化器（简要）
```python
class ClassListSerializer(serializers.ModelSerializer):
    grade_name = serializers.CharField(source='grade.name', read_only=True)
    headTeacherName = serializers.CharField(source='head_teacher.name', read_only=True)
    student_count = serializers.IntegerField(read_only=True)

    class Meta:
        model = Class
        fields = ['id','code','name','grade_name','headTeacherName','capacity','student_count','status','created_at']

class ClassDetailSerializer(serializers.ModelSerializer):
    class Meta:
        model = Class
        fields = '__all__'
        read_only_fields = ['id','created_at','updated_at','created_by','updated_by']
```

备注：`student_count` 可由注解或聚合获取：`annotate(student_count=Count('students'))`。

### 4.4 视图与路由
```
GET    /api/v1/classes/
POST   /api/v1/classes/
GET    /api/v1/classes/{id}/
PATCH  /api/v1/classes/{id}/
DELETE /api/v1/classes/{id}/

可选扩展：
POST /api/v1/classes/{id}/assign-teacher/
POST /api/v1/classes/{id}/graduate/       # 结班
GET  /api/v1/classes/{id}/students/       # 当前班学生
```

权限：管理员可 CRUD；教师默认只读，可授权部分写权限。

---

## 5. 前后端参数映射与接口对齐

### 5.1 前端 → 后端查询参数映射
- 学生列表：
  - page → page，pageSize → page_size
  - search → search
  - grade → 过渡期：grade 名称；后端建议使用 `grade_id`
  - className → 过渡期：班级名称；后端建议使用 `class_id`
  - status（学生）→ 可选字段；当前前端用于 mock

- 班级列表：
  - page → page，pageSize → page_size
  - search → search（名称/编码/班主任）
  - grade → 建议改为 `grade_id`
  - status → status
  - headTeacherId → head_teacher_id

### 5.2 后端 → 前端字段映射
- 学生：`current_class.name → className`
- 班级：
  - `grade.name → grade_name`（可直接返回 `grade_name`）
  - `head_teacher.name → headTeacherName`
  - `annotate student_count → studentCount`

### 5.3 统一分页键名
- 请求：`page, page_size`
- 响应：`data.results, data.pagination.{page,page_size,total_pages,total_count}`

---

## 6. API 文档与调试
- drf-spectacular：`/api/schema/`、`/api/docs/`
- 所有列表接口需补充 `OpenApiParameter` 文档化 `search/filters/pagination`

---

## 7. 部署与运行（要点）
- 环境变量：`SECRET_KEY, DB_*, REDIS_URL, DEBUG, ALLOWED_HOSTS`
- 本地开发：`docker-compose up -d db redis` 后运行 backend；前端 `VITE_API_URL` 指向 `http://localhost:8000/api/v1`
- 生产：Gunicorn + Nginx；开启日志与 Sentry

---

---
## 8.本地开发使用虚拟环境开发（总是，重要）
 - 每次编辑后端代码前，先执行myenv/Scripts/activate
---

## 更新日志
- 2025-01-08 v2.5.0
  - 精简后端规范文档，移除重复章节
  - 新增 schools.Class 模块对齐前端的API与字段映射
  - 明确统一分页与响应格式，补充参数映射表

